use core::fmt;

#[derive(Debug, PartialEq, Eq, Clone, Copy, Default, Hash)]
pub struct Span {
    pub start: u32,
    pub end: u32,
}

impl Span {
    pub fn new(start: u32, end: u32) -> Self {
        Self { start, end }
    }
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct Token<'a> {
    kind: TokenKind<'a>,
    location: Span,
}

impl<'a> Token<'a> {
    pub fn new(kind: TokenKind<'a>, location: Span) -> Token<'a> {
        Self { kind, location }
    }

    pub fn kind_as_ref(&self) -> &TokenKind<'a> {
        &self.kind
    }

    pub fn kind(&self) -> TokenKind<'a> {
        self.kind
    }

    pub fn location(&self) -> Span {
        self.location
    }

    pub fn shallow_eq_token_kind(&self, other: &TokenKind) -> bool {
        self.kind.shallow_eq_token(other)
    }
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub enum TokenKind<'a> {
    Identifier(&'a str),
    QuotedIdentifier(&'a str),
    StringLiteral(&'a str),
    NumberLiteral(&'a str),
    LocalVariable(&'a str),
    Comment(&'a str),
    Comma,
    LeftParen,
    RightParen,
    Equal,
    BangEqual,
    LessThanGreaterThan,
    LessThan,
    LessThanEqual,
    GreaterThan,
    GreaterThanEqual,
    Plus,
    Minus,
    ForwardSlash,
    Asterisk,
    PercentSign,
    Period,
    SemiColon,
    Eof,
    // PlusEqual,
    // MinusEqual,
    // DivideEqual,
    // MultiplyEqual,
    // PercentEqual,
    // AndEqual,
    // OrEqual,
    // CaretEqual,
    // Keywords
    Abs,
    Acos,
    All,
    Alter,
    And,
    Any,
    As,
    Asc,
    Asin,
    Atan,
    Autoincrement,
    Avg,
    Begin,
    Between,
    Bigint,
    Bit,
    By,
    Cascade,
    Case,
    Cast,
    Ceil,
    Ceiling,
    Char,
    Column,
    Columns,
    Commit,
    Commited,
    Constraint,
    Cos,
    Cot,
    Count,
    Create,
    Current,
    Date,
    Datetime,
    Day,
    Dayofweek,
    Dayofyear,
    Decimal,
    Declare,
    Degrees,
    Default,
    Delete,
    DenseRank,
    Desc,
    Describe,
    Distinct,
    Do,
    Drop,
    Else,
    End,
    Engine,
    Exec,
    Execute,
    Exists,
    Exp,
    False,
    Fetch,
    First,
    FirstValue,
    Float,
    Floor,
    Following,
    Foreign,
    From,
    Full,
    Function,
    Getdate,
    Group,
    Having,
    Hour,
    Hours,
    Identity,
    If,
    In,
    Increment,
    Index,
    Inner,
    Insert,
    Integer,
    Intersect,
    Int,
    Into,
    Is,
    Join,
    Key,
    Lag,
    Last,
    LastValue,
    Lead,
    Left,
    Like,
    Limit,
    Log,
    Log10,
    Max,
    Microsecond,
    Microseconds,
    Millisecond,
    Milliseconds,
    Min,
    Minute,
    Month,
    Nanosecond,
    Nanoseconds,
    Nchar,
    Next,
    Not,
    Null,
    Nullif,
    Numeric,
    Nvarchar,
    Offset,
    On,
    Only,
    Or,
    Order,
    Outer,
    Over,
    Partition,
    Password,
    Percent,
    Pi,
    Power,
    Preceding,
    Procedure,
    Radians,
    Rands,
    Range,
    Rank,
    Real,
    Return,
    Returns,
    Revoke,
    Right,
    Role,
    Rollback,
    Round,
    Row,
    Rowid,
    Rows,
    RowNumber,
    Second,
    Select,
    Set,
    Sign,
    Sin,
    Smallint,
    Snapshot,
    Some,
    Sqrt,
    Square,
    Stage,
    Start,
    Statistics,
    Stdev,
    Stdevp,
    Sum,
    Table,
    Tan,
    Temp,
    Then,
    Ties,
    Time,
    Tinyint,
    Top,
    Transaction,
    Trigger,
    True,
    Truncate,
    Unbounded,
    Uncommitted,
    Union,
    Unique,
    Unlock,
    Update,
    Upper,
    Use,
    User,
    Uuid,
    Value,
    Values,
    Varbinary,
    Varchar,
    Var,
    Varp,
    Week,
    When,
    Where,
    Window,
    With,
    Year,
}

impl<'a> TokenKind<'a> {
    pub fn default_identifier() -> Self {
        Self::Identifier("")
    }
    pub fn default_quoted_identifier() -> Self {
        Self::QuotedIdentifier("")
    }
    pub fn default_string_literal() -> Self {
        Self::StringLiteral("")
    }
    pub fn default_number_literal() -> Self {
        Self::NumberLiteral("")
    }
    pub fn default_local_variable() -> Self {
        Self::LocalVariable("")
    }
    pub fn default_comment() -> Self {
        Self::Comment("")
    }
    pub fn builtin_fn(&self) -> bool {
        match self {
            TokenKind::Abs
            | TokenKind::Acos
            | TokenKind::Asin
            | TokenKind::Atan
            | TokenKind::Avg
            | TokenKind::Cast
            | TokenKind::Ceil
            | TokenKind::Ceiling
            | TokenKind::Cos
            | TokenKind::Cot
            | TokenKind::Count
            | TokenKind::Degrees
            | TokenKind::DenseRank
            | TokenKind::Exp
            | TokenKind::Floor
            | TokenKind::Getdate
            | TokenKind::Log
            | TokenKind::Log10
            | TokenKind::Max
            | TokenKind::Min
            | TokenKind::Nullif
            | TokenKind::Pi
            | TokenKind::Power
            | TokenKind::Radians
            | TokenKind::Rank
            | TokenKind::Round
            | TokenKind::RowNumber
            | TokenKind::Sqrt
            | TokenKind::Square
            | TokenKind::Stage
            | TokenKind::Stdev
            | TokenKind::Stdevp
            | TokenKind::Sum
            | TokenKind::Tan
            | TokenKind::Var
            | TokenKind::Varp => true,
            _ => false,
        }
    }
    pub fn shallow_eq_token(&self, other: &TokenKind) -> bool {
        match (self, other) {
            (&TokenKind::Identifier(_), &TokenKind::Identifier(_)) => true,
            (&TokenKind::QuotedIdentifier(_), &TokenKind::QuotedIdentifier(_)) => true,
            (&TokenKind::StringLiteral(_), &TokenKind::StringLiteral(_)) => true,
            (&TokenKind::NumberLiteral(_), &TokenKind::NumberLiteral(_)) => true,
            (&TokenKind::LocalVariable(_), &TokenKind::LocalVariable(_)) => true,
            (&TokenKind::Comment(_), &TokenKind::Comment(_)) => true,
            (&TokenKind::Comma, &TokenKind::Comma) => true,
            (&TokenKind::LeftParen, &TokenKind::LeftParen) => true,
            (&TokenKind::RightParen, &TokenKind::RightParen) => true,
            (&TokenKind::Equal, &TokenKind::Equal) => true,
            (&TokenKind::BangEqual, &TokenKind::BangEqual) => true,
            (&TokenKind::LessThanGreaterThan, &TokenKind::LessThanGreaterThan) => true,
            (&TokenKind::LessThan, &TokenKind::LessThan) => true,
            (&TokenKind::LessThanEqual, &TokenKind::LessThanEqual) => true,
            (&TokenKind::GreaterThan, &TokenKind::GreaterThan) => true,
            (&TokenKind::GreaterThanEqual, &TokenKind::GreaterThanEqual) => true,
            (&TokenKind::Plus, &TokenKind::Plus) => true,
            (&TokenKind::Minus, &TokenKind::Minus) => true,
            (&TokenKind::ForwardSlash, &TokenKind::ForwardSlash) => true,
            (&TokenKind::Asterisk, &TokenKind::Asterisk) => true,
            (&TokenKind::PercentSign, &TokenKind::PercentSign) => true,
            (&TokenKind::Period, &TokenKind::Period) => true,
            (&TokenKind::SemiColon, &TokenKind::SemiColon) => true,
            (&TokenKind::Eof, &TokenKind::Eof) => true,
            (&TokenKind::Abs, &TokenKind::Abs) => true,
            (&TokenKind::Acos, &TokenKind::Acos) => true,
            (&TokenKind::All, &TokenKind::All) => true,
            (&TokenKind::Alter, &TokenKind::Alter) => true,
            (&TokenKind::And, &TokenKind::And) => true,
            (&TokenKind::Any, &TokenKind::Any) => true,
            (&TokenKind::As, &TokenKind::As) => true,
            (&TokenKind::Asc, &TokenKind::Asc) => true,
            (&TokenKind::Asin, &TokenKind::Asin) => true,
            (&TokenKind::Atan, &TokenKind::Atan) => true,
            (&TokenKind::Autoincrement, &TokenKind::Autoincrement) => true,
            (&TokenKind::Avg, &TokenKind::Avg) => true,
            (&TokenKind::Begin, &TokenKind::Begin) => true,
            (&TokenKind::Between, &TokenKind::Between) => true,
            (&TokenKind::Bigint, &TokenKind::Bigint) => true,
            (&TokenKind::Bit, &TokenKind::Bit) => true,
            (&TokenKind::By, &TokenKind::By) => true,
            (&TokenKind::Cascade, &TokenKind::Cascade) => true,
            (&TokenKind::Case, &TokenKind::Case) => true,
            (&TokenKind::Cast, &TokenKind::Cast) => true,
            (&TokenKind::Ceil, &TokenKind::Ceil) => true,
            (&TokenKind::Ceiling, &TokenKind::Ceiling) => true,
            (&TokenKind::Char, &TokenKind::Char) => true,
            (&TokenKind::Column, &TokenKind::Column) => true,
            (&TokenKind::Columns, &TokenKind::Columns) => true,
            (&TokenKind::Commit, &TokenKind::Commit) => true,
            (&TokenKind::Commited, &TokenKind::Commited) => true,
            (&TokenKind::Constraint, &TokenKind::Constraint) => true,
            (&TokenKind::Cos, &TokenKind::Cos) => true,
            (&TokenKind::Cot, &TokenKind::Cot) => true,
            (&TokenKind::Count, &TokenKind::Count) => true,
            (&TokenKind::Create, &TokenKind::Create) => true,
            (&TokenKind::Current, &TokenKind::Current) => true,
            (&TokenKind::Date, &TokenKind::Date) => true,
            (&TokenKind::Datetime, &TokenKind::Datetime) => true,
            (&TokenKind::Day, &TokenKind::Day) => true,
            (&TokenKind::Dayofweek, &TokenKind::Dayofweek) => true,
            (&TokenKind::Dayofyear, &TokenKind::Dayofyear) => true,
            (&TokenKind::Decimal, &TokenKind::Decimal) => true,
            (&TokenKind::Declare, &TokenKind::Declare) => true,
            (&TokenKind::Degrees, &TokenKind::Degrees) => true,
            (&TokenKind::Default, &TokenKind::Default) => true,
            (&TokenKind::Delete, &TokenKind::Delete) => true,
            (&TokenKind::DenseRank, &TokenKind::DenseRank) => true,
            (&TokenKind::Desc, &TokenKind::Desc) => true,
            (&TokenKind::Describe, &TokenKind::Describe) => true,
            (&TokenKind::Distinct, &TokenKind::Distinct) => true,
            (&TokenKind::Do, &TokenKind::Do) => true,
            (&TokenKind::Drop, &TokenKind::Drop) => true,
            (&TokenKind::Else, &TokenKind::Else) => true,
            (&TokenKind::End, &TokenKind::End) => true,
            (&TokenKind::Engine, &TokenKind::Engine) => true,
            (&TokenKind::Exec, &TokenKind::Exec) => true,
            (&TokenKind::Execute, &TokenKind::Execute) => true,
            (&TokenKind::Exists, &TokenKind::Exists) => true,
            (&TokenKind::Exp, &TokenKind::Exp) => true,
            (&TokenKind::False, &TokenKind::False) => true,
            (&TokenKind::Fetch, &TokenKind::Fetch) => true,
            (&TokenKind::First, &TokenKind::First) => true,
            (&TokenKind::FirstValue, &TokenKind::FirstValue) => true,
            (&TokenKind::Float, &TokenKind::Float) => true,
            (&TokenKind::Floor, &TokenKind::Floor) => true,
            (&TokenKind::Following, &TokenKind::Following) => true,
            (&TokenKind::Foreign, &TokenKind::Foreign) => true,
            (&TokenKind::From, &TokenKind::From) => true,
            (&TokenKind::Full, &TokenKind::Full) => true,
            (&TokenKind::Function, &TokenKind::Function) => true,
            (&TokenKind::Getdate, &TokenKind::Getdate) => true,
            (&TokenKind::Group, &TokenKind::Group) => true,
            (&TokenKind::Having, &TokenKind::Having) => true,
            (&TokenKind::Hour, &TokenKind::Hour) => true,
            (&TokenKind::Hours, &TokenKind::Hours) => true,
            (&TokenKind::Identity, &TokenKind::Identity) => true,
            (&TokenKind::If, &TokenKind::If) => true,
            (&TokenKind::In, &TokenKind::In) => true,
            (&TokenKind::Increment, &TokenKind::Increment) => true,
            (&TokenKind::Index, &TokenKind::Index) => true,
            (&TokenKind::Inner, &TokenKind::Inner) => true,
            (&TokenKind::Insert, &TokenKind::Insert) => true,
            (&TokenKind::Integer, &TokenKind::Integer) => true,
            (&TokenKind::Intersect, &TokenKind::Intersect) => true,
            (&TokenKind::Int, &TokenKind::Int) => true,
            (&TokenKind::Into, &TokenKind::Into) => true,
            (&TokenKind::Is, &TokenKind::Is) => true,
            (&TokenKind::Join, &TokenKind::Join) => true,
            (&TokenKind::Key, &TokenKind::Key) => true,
            (&TokenKind::Lag, &TokenKind::Lag) => true,
            (&TokenKind::Last, &TokenKind::Last) => true,
            (&TokenKind::LastValue, &TokenKind::LastValue) => true,
            (&TokenKind::Lead, &TokenKind::Lead) => true,
            (&TokenKind::Left, &TokenKind::Left) => true,
            (&TokenKind::Like, &TokenKind::Like) => true,
            (&TokenKind::Limit, &TokenKind::Limit) => true,
            (&TokenKind::Log, &TokenKind::Log) => true,
            (&TokenKind::Log10, &TokenKind::Log10) => true,
            (&TokenKind::Max, &TokenKind::Max) => true,
            (&TokenKind::Microsecond, &TokenKind::Microsecond) => true,
            (&TokenKind::Microseconds, &TokenKind::Microseconds) => true,
            (&TokenKind::Millisecond, &TokenKind::Millisecond) => true,
            (&TokenKind::Milliseconds, &TokenKind::Milliseconds) => true,
            (&TokenKind::Min, &TokenKind::Min) => true,
            (&TokenKind::Minute, &TokenKind::Minute) => true,
            (&TokenKind::Month, &TokenKind::Month) => true,
            (&TokenKind::Nanosecond, &TokenKind::Nanosecond) => true,
            (&TokenKind::Nanoseconds, &TokenKind::Nanoseconds) => true,
            (&TokenKind::Nchar, &TokenKind::Nchar) => true,
            (&TokenKind::Next, &TokenKind::Next) => true,
            (&TokenKind::Not, &TokenKind::Not) => true,
            (&TokenKind::Null, &TokenKind::Null) => true,
            (&TokenKind::Nullif, &TokenKind::Nullif) => true,
            (&TokenKind::Numeric, &TokenKind::Numeric) => true,
            (&TokenKind::Nvarchar, &TokenKind::Nvarchar) => true,
            (&TokenKind::Offset, &TokenKind::Offset) => true,
            (&TokenKind::On, &TokenKind::On) => true,
            (&TokenKind::Only, &TokenKind::Only) => true,
            (&TokenKind::Or, &TokenKind::Or) => true,
            (&TokenKind::Order, &TokenKind::Order) => true,
            (&TokenKind::Outer, &TokenKind::Outer) => true,
            (&TokenKind::Over, &TokenKind::Over) => true,
            (&TokenKind::Partition, &TokenKind::Partition) => true,
            (&TokenKind::Password, &TokenKind::Password) => true,
            (&TokenKind::Percent, &TokenKind::Percent) => true,
            (&TokenKind::Pi, &TokenKind::Pi) => true,
            (&TokenKind::Power, &TokenKind::Power) => true,
            (&TokenKind::Preceding, &TokenKind::Preceding) => true,
            (&TokenKind::Procedure, &TokenKind::Procedure) => true,
            (&TokenKind::Radians, &TokenKind::Radians) => true,
            (&TokenKind::Rands, &TokenKind::Rands) => true,
            (&TokenKind::Range, &TokenKind::Range) => true,
            (&TokenKind::Rank, &TokenKind::Rank) => true,
            (&TokenKind::Real, &TokenKind::Real) => true,
            (&TokenKind::Return, &TokenKind::Return) => true,
            (&TokenKind::Returns, &TokenKind::Returns) => true,
            (&TokenKind::Revoke, &TokenKind::Revoke) => true,
            (&TokenKind::Right, &TokenKind::Right) => true,
            (&TokenKind::Role, &TokenKind::Role) => true,
            (&TokenKind::Rollback, &TokenKind::Rollback) => true,
            (&TokenKind::Round, &TokenKind::Round) => true,
            (&TokenKind::Row, &TokenKind::Row) => true,
            (&TokenKind::Rowid, &TokenKind::Rowid) => true,
            (&TokenKind::Rows, &TokenKind::Rows) => true,
            (&TokenKind::RowNumber, &TokenKind::RowNumber) => true,
            (&TokenKind::Second, &TokenKind::Second) => true,
            (&TokenKind::Select, &TokenKind::Select) => true,
            (&TokenKind::Set, &TokenKind::Set) => true,
            (&TokenKind::Sign, &TokenKind::Sign) => true,
            (&TokenKind::Sin, &TokenKind::Sin) => true,
            (&TokenKind::Smallint, &TokenKind::Smallint) => true,
            (&TokenKind::Snapshot, &TokenKind::Snapshot) => true,
            (&TokenKind::Some, &TokenKind::Some) => true,
            (&TokenKind::Sqrt, &TokenKind::Sqrt) => true,
            (&TokenKind::Square, &TokenKind::Square) => true,
            (&TokenKind::Stage, &TokenKind::Stage) => true,
            (&TokenKind::Start, &TokenKind::Start) => true,
            (&TokenKind::Statistics, &TokenKind::Statistics) => true,
            (&TokenKind::Stdev, &TokenKind::Stdev) => true,
            (&TokenKind::Stdevp, &TokenKind::Stdevp) => true,
            (&TokenKind::Sum, &TokenKind::Sum) => true,
            (&TokenKind::Table, &TokenKind::Table) => true,
            (&TokenKind::Tan, &TokenKind::Tan) => true,
            (&TokenKind::Temp, &TokenKind::Temp) => true,
            (&TokenKind::Then, &TokenKind::Then) => true,
            (&TokenKind::Ties, &TokenKind::Ties) => true,
            (&TokenKind::Time, &TokenKind::Time) => true,
            (&TokenKind::Tinyint, &TokenKind::Tinyint) => true,
            (&TokenKind::Top, &TokenKind::Top) => true,
            (&TokenKind::Transaction, &TokenKind::Transaction) => true,
            (&TokenKind::Trigger, &TokenKind::Trigger) => true,
            (&TokenKind::True, &TokenKind::True) => true,
            (&TokenKind::Truncate, &TokenKind::Truncate) => true,
            (&TokenKind::Unbounded, &TokenKind::Unbounded) => true,
            (&TokenKind::Uncommitted, &TokenKind::Uncommitted) => true,
            (&TokenKind::Union, &TokenKind::Union) => true,
            (&TokenKind::Unique, &TokenKind::Unique) => true,
            (&TokenKind::Unlock, &TokenKind::Unlock) => true,
            (&TokenKind::Update, &TokenKind::Update) => true,
            (&TokenKind::Upper, &TokenKind::Upper) => true,
            (&TokenKind::Use, &TokenKind::Use) => true,
            (&TokenKind::User, &TokenKind::User) => true,
            (&TokenKind::Uuid, &TokenKind::Uuid) => true,
            (&TokenKind::Value, &TokenKind::Value) => true,
            (&TokenKind::Values, &TokenKind::Values) => true,
            (&TokenKind::Varbinary, &TokenKind::Varbinary) => true,
            (&TokenKind::Varchar, &TokenKind::Varchar) => true,
            (&TokenKind::Var, &TokenKind::Var) => true,
            (&TokenKind::Varp, &TokenKind::Varp) => true,
            (&TokenKind::Week, &TokenKind::Week) => true,
            (&TokenKind::When, &TokenKind::When) => true,
            (&TokenKind::Where, &TokenKind::Where) => true,
            (&TokenKind::Window, &TokenKind::Window) => true,
            (&TokenKind::With, &TokenKind::With) => true,
            (&TokenKind::Year, &TokenKind::Year) => true,
            _ => false,
        }
    }
}

pub fn lookup_keyword(str: &str) -> Option<TokenKind> {
    let normalized_keyword = str.to_lowercase();
    match normalized_keyword.as_str() {
        "abs" => Some(TokenKind::Abs),
        "acos" => Some(TokenKind::Acos),
        "all" => Some(TokenKind::All),
        "alter" => Some(TokenKind::Alter),
        "and" => Some(TokenKind::And),
        "any" => Some(TokenKind::Any),
        "as" => Some(TokenKind::As),
        "asc" => Some(TokenKind::Asc),
        "asin" => Some(TokenKind::Asin),
        "atan" => Some(TokenKind::Atan),
        "autoincrement" => Some(TokenKind::Autoincrement),
        "avg" => Some(TokenKind::Avg),
        "begin" => Some(TokenKind::Begin),
        "between" => Some(TokenKind::Between),
        "bigint" => Some(TokenKind::Bigint),
        "bit" => Some(TokenKind::Bit),
        "by" => Some(TokenKind::By),
        "cascade" => Some(TokenKind::Cascade),
        "case" => Some(TokenKind::Case),
        "cast" => Some(TokenKind::Cast),
        "ceil" => Some(TokenKind::Ceil),
        "ceiling" => Some(TokenKind::Ceiling),
        "char" => Some(TokenKind::Char),
        "column" => Some(TokenKind::Column),
        "columns" => Some(TokenKind::Columns),
        "commit" => Some(TokenKind::Commit),
        "commited" => Some(TokenKind::Commited),
        "constraint" => Some(TokenKind::Constraint),
        "cos" => Some(TokenKind::Cos),
        "cot" => Some(TokenKind::Cot),
        "count" => Some(TokenKind::Count),
        "create" => Some(TokenKind::Create),
        "current" => Some(TokenKind::Current),
        "date" => Some(TokenKind::Date),
        "datetime" => Some(TokenKind::Datetime),
        "day" => Some(TokenKind::Day),
        "dayofweek" => Some(TokenKind::Dayofweek),
        "dayofyear" => Some(TokenKind::Dayofyear),
        "decimal" => Some(TokenKind::Decimal),
        "declare" => Some(TokenKind::Declare),
        "degrees" => Some(TokenKind::Degrees),
        "default" => Some(TokenKind::Default),
        "delete" => Some(TokenKind::Delete),
        "dense_rank" => Some(TokenKind::DenseRank),
        "desc" => Some(TokenKind::Desc),
        "describe" => Some(TokenKind::Describe),
        "distinct" => Some(TokenKind::Distinct),
        "do" => Some(TokenKind::Do),
        "drop" => Some(TokenKind::Drop),
        "else" => Some(TokenKind::Else),
        "end" => Some(TokenKind::End),
        "engine" => Some(TokenKind::Engine),
        "exec" => Some(TokenKind::Exec),
        "execute" => Some(TokenKind::Execute),
        "exists" => Some(TokenKind::Exists),
        "exp" => Some(TokenKind::Exp),
        "false" => Some(TokenKind::False),
        "fetch" => Some(TokenKind::Fetch),
        "first" => Some(TokenKind::First),
        "first_value" => Some(TokenKind::FirstValue),
        "float" => Some(TokenKind::Float),
        "floor" => Some(TokenKind::Floor),
        "following" => Some(TokenKind::Following),
        "foreign" => Some(TokenKind::Foreign),
        "from" => Some(TokenKind::From),
        "full" => Some(TokenKind::Full),
        "function" => Some(TokenKind::Function),
        "getdate" => Some(TokenKind::Getdate),
        "group" => Some(TokenKind::Group),
        "having" => Some(TokenKind::Having),
        "hour" => Some(TokenKind::Hour),
        "hours" => Some(TokenKind::Hours),
        "identity" => Some(TokenKind::Identity),
        "if" => Some(TokenKind::If),
        "in" => Some(TokenKind::In),
        "increment" => Some(TokenKind::Increment),
        "index" => Some(TokenKind::Index),
        "inner" => Some(TokenKind::Inner),
        "insert" => Some(TokenKind::Insert),
        "integer" => Some(TokenKind::Integer),
        "intersect" => Some(TokenKind::Intersect),
        "int" => Some(TokenKind::Int),
        "into" => Some(TokenKind::Into),
        "is" => Some(TokenKind::Is),
        "join" => Some(TokenKind::Join),
        "key" => Some(TokenKind::Key),
        "lag" => Some(TokenKind::Lag),
        "last" => Some(TokenKind::Last),
        "last_value" => Some(TokenKind::LastValue),
        "lead" => Some(TokenKind::Lead),
        "left" => Some(TokenKind::Left),
        "like" => Some(TokenKind::Like),
        "limit" => Some(TokenKind::Limit),
        "log" => Some(TokenKind::Log),
        "log10" => Some(TokenKind::Log10),
        "max" => Some(TokenKind::Max),
        "microsecond" => Some(TokenKind::Microsecond),
        "microseconds" => Some(TokenKind::Microseconds),
        "millisecond" => Some(TokenKind::Millisecond),
        "milliseconds" => Some(TokenKind::Milliseconds),
        "min" => Some(TokenKind::Min),
        "minute" => Some(TokenKind::Minute),
        "month" => Some(TokenKind::Month),
        "nanosecond" => Some(TokenKind::Nanosecond),
        "nanoseconds" => Some(TokenKind::Nanoseconds),
        "nchar" => Some(TokenKind::Nchar),
        "next" => Some(TokenKind::Next),
        "not" => Some(TokenKind::Not),
        "null" => Some(TokenKind::Null),
        "nullif" => Some(TokenKind::Nullif),
        "numeric" => Some(TokenKind::Numeric),
        "nvarchar" => Some(TokenKind::Nvarchar),
        "offset" => Some(TokenKind::Offset),
        "on" => Some(TokenKind::On),
        "only" => Some(TokenKind::Only),
        "or" => Some(TokenKind::Or),
        "order" => Some(TokenKind::Order),
        "outer" => Some(TokenKind::Outer),
        "over" => Some(TokenKind::Over),
        "partition" => Some(TokenKind::Partition),
        "password" => Some(TokenKind::Password),
        "percent" => Some(TokenKind::Percent),
        "pi" => Some(TokenKind::Pi),
        "power" => Some(TokenKind::Power),
        "preceding" => Some(TokenKind::Preceding),
        "procedure" => Some(TokenKind::Procedure),
        "radians" => Some(TokenKind::Radians),
        "rands" => Some(TokenKind::Rands),
        "range" => Some(TokenKind::Range),
        "rank" => Some(TokenKind::Rank),
        "real" => Some(TokenKind::Real),
        "return" => Some(TokenKind::Return),
        "returns" => Some(TokenKind::Returns),
        "revoke" => Some(TokenKind::Revoke),
        "right" => Some(TokenKind::Right),
        "role" => Some(TokenKind::Role),
        "rollback" => Some(TokenKind::Rollback),
        "round" => Some(TokenKind::Round),
        "row" => Some(TokenKind::Row),
        "rowid" => Some(TokenKind::Rowid),
        "rows" => Some(TokenKind::Rows),
        "row_number" => Some(TokenKind::RowNumber),
        "second" => Some(TokenKind::Second),
        "select" => Some(TokenKind::Select),
        "set" => Some(TokenKind::Set),
        "sign" => Some(TokenKind::Sign),
        "sin" => Some(TokenKind::Sin),
        "smallint" => Some(TokenKind::Smallint),
        "snapshot" => Some(TokenKind::Snapshot),
        "some" => Some(TokenKind::Some),
        "sqrt" => Some(TokenKind::Sqrt),
        "square" => Some(TokenKind::Square),
        "stage" => Some(TokenKind::Stage),
        "start" => Some(TokenKind::Start),
        "statistics" => Some(TokenKind::Statistics),
        "stdev" => Some(TokenKind::Stdev),
        "stdevp" => Some(TokenKind::Stdevp),
        "sum" => Some(TokenKind::Sum),
        "table" => Some(TokenKind::Table),
        "tan" => Some(TokenKind::Tan),
        "temp" => Some(TokenKind::Temp),
        "then" => Some(TokenKind::Then),
        "ties" => Some(TokenKind::Ties),
        "time" => Some(TokenKind::Time),
        "tinyint" => Some(TokenKind::Tinyint),
        "top" => Some(TokenKind::Top),
        "transaction" => Some(TokenKind::Transaction),
        "trigger" => Some(TokenKind::Trigger),
        "true" => Some(TokenKind::True),
        "truncate" => Some(TokenKind::Truncate),
        "unbounded" => Some(TokenKind::Unbounded),
        "uncommitted" => Some(TokenKind::Uncommitted),
        "union" => Some(TokenKind::Union),
        "unique" => Some(TokenKind::Unique),
        "unlock" => Some(TokenKind::Unlock),
        "update" => Some(TokenKind::Update),
        "upper" => Some(TokenKind::Upper),
        "use" => Some(TokenKind::Use),
        "user" => Some(TokenKind::User),
        "uuid" => Some(TokenKind::Uuid),
        "value" => Some(TokenKind::Value),
        "values" => Some(TokenKind::Values),
        "varbinary" => Some(TokenKind::Varbinary),
        "varchar" => Some(TokenKind::Varchar),
        "var" => Some(TokenKind::Var),
        "varp" => Some(TokenKind::Varp),
        "week" => Some(TokenKind::Week),
        "when" => Some(TokenKind::When),
        "where" => Some(TokenKind::Where),
        "window" => Some(TokenKind::Window),
        "with" => Some(TokenKind::With),
        "year" => Some(TokenKind::Year),
        _ => None,
    }
}

impl<'a> fmt::Display for TokenKind<'a> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self {
            TokenKind::Identifier(i) => write!(f, "{}", i),
            TokenKind::QuotedIdentifier(i) => write!(f, "{}", i),
            TokenKind::StringLiteral(s) => write!(f, "{}", s),
            TokenKind::NumberLiteral(n) => write!(f, "{}", n),
            TokenKind::LocalVariable(v) => write!(f, "{}", v),
            TokenKind::Comment(c) => write!(f, "-- {}", c),
            TokenKind::Comma => f.write_str(","),
            TokenKind::LeftParen => f.write_str("("),
            TokenKind::RightParen => f.write_str(")"),
            TokenKind::Equal => f.write_str("="),
            TokenKind::BangEqual => f.write_str("!="),
            TokenKind::LessThanGreaterThan => f.write_str("<>"),
            TokenKind::LessThan => f.write_str("<"),
            TokenKind::LessThanEqual => f.write_str("<="),
            TokenKind::GreaterThan => f.write_str(">"),
            TokenKind::GreaterThanEqual => f.write_str(">="),
            TokenKind::Plus => f.write_str("+"),
            TokenKind::Minus => f.write_str("-"),
            TokenKind::ForwardSlash => f.write_str("/"),
            TokenKind::Asterisk => f.write_str("*"),
            TokenKind::PercentSign => f.write_str("%"),
            TokenKind::Period => f.write_str("."),
            TokenKind::SemiColon => f.write_str(";"),
            // Token::LeftBracket => f.write_str("["),
            // Token::RightBracket => f.write_str("]"),
            // Token::LeftBrace => f.write_str("{"),
            // Token::RightBrace => f.write_str("}"),
            TokenKind::Eof => f.write_str("EOF"),
            // Token::PlusEqual => f.write_str("+="),
            // Token::MinusEqual => f.write_str("-="),
            // Token::DivideEqual => f.write_str("/="),
            // Token::MultiplyEqual => f.write_str("*="),
            // Token::PercentEqual => f.write_str("%="),
            // Token::AndEqual => f.write_str("&="),
            // Token::OrEqual => f.write_str("|="),
            // Token::CaretEqual => f.write_str("^="),
            TokenKind::Abs => f.write_str("Abs"),
            TokenKind::Acos => f.write_str("Acos"),
            TokenKind::All => f.write_str("All"),
            TokenKind::Alter => f.write_str("Alter"),
            TokenKind::And => f.write_str("And"),
            TokenKind::Any => f.write_str("Any"),
            TokenKind::As => f.write_str("As"),
            TokenKind::Asc => f.write_str("Asc"),
            TokenKind::Asin => f.write_str("Asin"),
            TokenKind::Atan => f.write_str("Atan"),
            TokenKind::Autoincrement => f.write_str("Autoincrement"),
            TokenKind::Avg => f.write_str("Avg"),
            TokenKind::Begin => f.write_str("Begin"),
            TokenKind::Between => f.write_str("Between"),
            TokenKind::Bigint => f.write_str("Bigint"),
            TokenKind::Bit => f.write_str("Bit"),
            TokenKind::By => f.write_str("By"),
            TokenKind::Cascade => f.write_str("Cascade"),
            TokenKind::Case => f.write_str("Case"),
            TokenKind::Cast => f.write_str("Cast"),
            TokenKind::Ceil => f.write_str("Ceil"),
            TokenKind::Ceiling => f.write_str("Ceiling"),
            TokenKind::Char => f.write_str("Char"),
            TokenKind::Column => f.write_str("Column"),
            TokenKind::Columns => f.write_str("Columns"),
            TokenKind::Commit => f.write_str("Commit"),
            TokenKind::Commited => f.write_str("Commited"),
            TokenKind::Constraint => f.write_str("Constraint"),
            TokenKind::Cos => f.write_str("Cos"),
            TokenKind::Cot => f.write_str("Cot"),
            TokenKind::Count => f.write_str("Count"),
            TokenKind::Create => f.write_str("Create"),
            TokenKind::Current => f.write_str("Current"),
            TokenKind::Date => f.write_str("Date"),
            TokenKind::Datetime => f.write_str("Datetime"),
            TokenKind::Day => f.write_str("Day"),
            TokenKind::Dayofweek => f.write_str("Dayofweek"),
            TokenKind::Dayofyear => f.write_str("Dayofyear"),
            TokenKind::Decimal => f.write_str("Decimal"),
            TokenKind::Declare => f.write_str("Declare"),
            TokenKind::Degrees => f.write_str("Degrees"),
            TokenKind::Default => f.write_str("Default"),
            TokenKind::Delete => f.write_str("Delete"),
            TokenKind::DenseRank => f.write_str("DenseRank"),
            TokenKind::Desc => f.write_str("Desc"),
            TokenKind::Describe => f.write_str("Describe"),
            TokenKind::Distinct => f.write_str("Distinct"),
            TokenKind::Do => f.write_str("Do"),
            TokenKind::Drop => f.write_str("Drop"),
            TokenKind::Else => f.write_str("Else"),
            TokenKind::End => f.write_str("End"),
            TokenKind::Engine => f.write_str("Engine"),
            TokenKind::Exec => f.write_str("Exec"),
            TokenKind::Execute => f.write_str("Execute"),
            TokenKind::Exists => f.write_str("Exists"),
            TokenKind::Exp => f.write_str("Exp"),
            TokenKind::False => f.write_str("False"),
            TokenKind::Fetch => f.write_str("Fetch"),
            TokenKind::First => f.write_str("First"),
            TokenKind::FirstValue => f.write_str("FirstValue"),
            TokenKind::Float => f.write_str("Float"),
            TokenKind::Floor => f.write_str("Floor"),
            TokenKind::Following => f.write_str("Following"),
            TokenKind::Foreign => f.write_str("Foreign"),
            TokenKind::From => f.write_str("From"),
            TokenKind::Full => f.write_str("Full"),
            TokenKind::Function => f.write_str("Function"),
            TokenKind::Getdate => f.write_str("Getdate"),
            TokenKind::Group => f.write_str("Group"),
            TokenKind::Having => f.write_str("Having"),
            TokenKind::Hour => f.write_str("Hour"),
            TokenKind::Hours => f.write_str("Hours"),
            TokenKind::Identity => f.write_str("Identity"),
            TokenKind::If => f.write_str("If"),
            TokenKind::In => f.write_str("In"),
            TokenKind::Increment => f.write_str("Increment"),
            TokenKind::Index => f.write_str("Index"),
            TokenKind::Inner => f.write_str("Inner"),
            TokenKind::Insert => f.write_str("Insert"),
            TokenKind::Integer => f.write_str("Integer"),
            TokenKind::Intersect => f.write_str("Intersect"),
            TokenKind::Int => f.write_str("Int"),
            TokenKind::Into => f.write_str("Into"),
            TokenKind::Is => f.write_str("Is"),
            TokenKind::Join => f.write_str("Join"),
            TokenKind::Key => f.write_str("Key"),
            TokenKind::Lag => f.write_str("Lag"),
            TokenKind::Last => f.write_str("Last"),
            TokenKind::LastValue => f.write_str("LastValue"),
            TokenKind::Lead => f.write_str("Lead"),
            TokenKind::Left => f.write_str("Left"),
            TokenKind::Like => f.write_str("Like"),
            TokenKind::Limit => f.write_str("Limit"),
            TokenKind::Log => f.write_str("Log"),
            TokenKind::Log10 => f.write_str("Log10"),
            TokenKind::Max => f.write_str("Max"),
            TokenKind::Microsecond => f.write_str("Microsecond"),
            TokenKind::Microseconds => f.write_str("Microseconds"),
            TokenKind::Millisecond => f.write_str("Millisecond"),
            TokenKind::Milliseconds => f.write_str("Milliseconds"),
            TokenKind::Min => f.write_str("Min"),
            TokenKind::Minute => f.write_str("Minute"),
            TokenKind::Month => f.write_str("Month"),
            TokenKind::Nanosecond => f.write_str("Nanosecond"),
            TokenKind::Nanoseconds => f.write_str("Nanoseconds"),
            TokenKind::Nchar => f.write_str("Nchar"),
            TokenKind::Next => f.write_str("Next"),
            TokenKind::Not => f.write_str("Not"),
            TokenKind::Null => f.write_str("Null"),
            TokenKind::Nullif => f.write_str("Nullif"),
            TokenKind::Numeric => f.write_str("Numeric"),
            TokenKind::Nvarchar => f.write_str("Nvarchar"),
            TokenKind::Offset => f.write_str("Offset"),
            TokenKind::On => f.write_str("On"),
            TokenKind::Only => f.write_str("Only"),
            TokenKind::Or => f.write_str("Or"),
            TokenKind::Order => f.write_str("Order"),
            TokenKind::Outer => f.write_str("Outer"),
            TokenKind::Over => f.write_str("Over"),
            TokenKind::Partition => f.write_str("Partition"),
            TokenKind::Password => f.write_str("Password"),
            TokenKind::Percent => f.write_str("Percent"),
            TokenKind::Pi => f.write_str("Pi"),
            TokenKind::Power => f.write_str("Power"),
            TokenKind::Preceding => f.write_str("Preceding"),
            TokenKind::Procedure => f.write_str("Procedure"),
            TokenKind::Radians => f.write_str("Radians"),
            TokenKind::Rands => f.write_str("Rands"),
            TokenKind::Range => f.write_str("Range"),
            TokenKind::Rank => f.write_str("Rank"),
            TokenKind::Real => f.write_str("Real"),
            TokenKind::Return => f.write_str("Return"),
            TokenKind::Returns => f.write_str("Returns"),
            TokenKind::Revoke => f.write_str("Revoke"),
            TokenKind::Right => f.write_str("Right"),
            TokenKind::Role => f.write_str("Role"),
            TokenKind::Rollback => f.write_str("Rollback"),
            TokenKind::Round => f.write_str("Round"),
            TokenKind::Row => f.write_str("Row"),
            TokenKind::Rowid => f.write_str("Rowid"),
            TokenKind::Rows => f.write_str("Rows"),
            TokenKind::RowNumber => f.write_str("RowNumber"),
            TokenKind::Second => f.write_str("Second"),
            TokenKind::Select => f.write_str("Select"),
            TokenKind::Set => f.write_str("Set"),
            TokenKind::Sign => f.write_str("Sign"),
            TokenKind::Sin => f.write_str("Sin"),
            TokenKind::Smallint => f.write_str("Smallint"),
            TokenKind::Snapshot => f.write_str("Snapshot"),
            TokenKind::Some => f.write_str("Some"),
            TokenKind::Sqrt => f.write_str("Sqrt"),
            TokenKind::Square => f.write_str("Square"),
            TokenKind::Stage => f.write_str("Stage"),
            TokenKind::Start => f.write_str("Start"),
            TokenKind::Statistics => f.write_str("Statistics"),
            TokenKind::Stdev => f.write_str("Stdev"),
            TokenKind::Stdevp => f.write_str("Stdevp"),
            TokenKind::Sum => f.write_str("Sum"),
            TokenKind::Table => f.write_str("Table"),
            TokenKind::Tan => f.write_str("Tan"),
            TokenKind::Temp => f.write_str("Temp"),
            TokenKind::Then => f.write_str("Then"),
            TokenKind::Ties => f.write_str("Ties"),
            TokenKind::Time => f.write_str("Time"),
            TokenKind::Tinyint => f.write_str("Tinyint"),
            TokenKind::Top => f.write_str("Top"),
            TokenKind::Transaction => f.write_str("Transaction"),
            TokenKind::Trigger => f.write_str("Trigger"),
            TokenKind::True => f.write_str("True"),
            TokenKind::Truncate => f.write_str("Truncate"),
            TokenKind::Unbounded => f.write_str("Unbounded"),
            TokenKind::Uncommitted => f.write_str("Uncommitted"),
            TokenKind::Union => f.write_str("Union"),
            TokenKind::Unique => f.write_str("Unique"),
            TokenKind::Unlock => f.write_str("Unlock"),
            TokenKind::Update => f.write_str("Update"),
            TokenKind::Upper => f.write_str("Upper"),
            TokenKind::Use => f.write_str("Use"),
            TokenKind::User => f.write_str("User"),
            TokenKind::Uuid => f.write_str("Uuid"),
            TokenKind::Value => f.write_str("Value"),
            TokenKind::Values => f.write_str("Values"),
            TokenKind::Varbinary => f.write_str("Varbinary"),
            TokenKind::Varchar => f.write_str("Varchar"),
            TokenKind::Var => f.write_str("Var"),
            TokenKind::Varp => f.write_str("Varp"),
            TokenKind::Week => f.write_str("Week"),
            TokenKind::When => f.write_str("When"),
            TokenKind::Where => f.write_str("Where"),
            TokenKind::Window => f.write_str("Window"),
            TokenKind::With => f.write_str("With"),
            TokenKind::Year => f.write_str("Year"),
        }
    }
}
